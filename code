       Program Nv
        Implicit none
 
        INTEGER, PARAMETER:: IO = 12 ! input-output unit
        INTEGER I,J,NI, NJ, Z, NITER
        REAL L, H, U0, MU, NU, R0, P0, Hjet 
        REAL dx, dy, CFL, Uref, EPS, dt, Re_x, C_f_bl, C_f, U_max, delta
        REAL,ALLOCATABLE :: X_Node(:,:),Y_Node(:,:)
        REAL,ALLOCATABLE :: X_Cell(:,:),Y_Cell(:,:)
        REAL,ALLOCATABLE :: P_c(:,:),U_c(:,:),V_c(:,:)
 
        write(*,*) 'Read input file'
        open(IO,FILE='Input.txt')
        read(IO,*) L
        read(IO,*) H
        read(IO,*) NI
        read(IO,*) NJ
        read(IO,*) NITER
        read(IO,*) CFL
        read(IO,*) Uref
        read(IO,*) EPS
 
        read(IO,*) U0
        read(IO,*) MU
        read(IO,*) R0
        read(IO,*) P0
        read(IO,*) Hjet
        CLOSE(IO)

        allocate(X_Node(NI,NJ)) ! mesh nodes X-coordinates
        allocate(Y_Node(NI,NJ)) ! mesh nodes Y-coordinates
        allocate(X_Cell(0:NI,0:NJ)) ! cell centers X-coordinates
        allocate(Y_Cell(0:NI,0:NJ)) ! cell centers Y-coordinates

!------ Cell-centered variables
        allocate(U_c(0:NI,0:NJ))   ! Velocity U
        allocate(V_c(0:NI,0:NJ))   ! Velocity V
        allocate(P_c(0:NI,0:NJ))   ! Pressure

        dx=L/(NI-1)
        dy=H/(NJ-1)

!------ Coordinate of nodes

	Z = INT(Hjet/dy)

        DO I=1,NI
          DO J=1,NJ
            X_Node(I,J)=(I-1)*dx
            Y_Node(I,J)=(J-1)*dy
          END DO
        END DO

!------ Coordinate of cell centers
        X_Cell(0,1:NJ)=-dx/2
        Y_Cell(0,1:NJ)=Y_Node(1,1:NJ)+dy/2
        X_Cell(1:NI,0)=X_Node(1:NI,1)+dx/2
        Y_Cell(1:NI,0)=-dy/2
        DO I=1,NI
          DO J=1,NJ
            X_Cell(I,J)=X_Node(I,J)+dx/2
            Y_Cell(I,J)=Y_Node(I,J)+dy/2
          END DO
        END DO

!----------------- Parameters ------------------------

        NU=MU/R0
        dt = (CFL/U0)*MIN(dy,dx)

        write(*,*)'L= ', L, 'NI= ', NI, 'dx= ', dx
        write(*,*)'H= ', H, 'NJ= ', NJ, 'dy= ', dy
        write(*,*)'ReL= ', U0*L/NU, 'Hjet= ', Hjet, 'Z= ', Z
	write(*,*)'ReHjet= ', U0*Hjet/NU
	write(*,*)'dt= ', dt

!----------------- Initial fields -----------------------------

        DO I=0,NI
          DO J=0,NJ
	    IF (J<=Z) THEN
            	U_c(I,J)=U0
	    ELSE
		U_c(I,J)=Uref
	    ENDIF
            V_c(I,J)=1.0e-5
            P_c(I,J)=0.0
          ENDDO
        ENDDO


!---------------- Boundary conditions -------------------------


	!inlet
        U_c(0,0:Z) = U0
	U_c(0,Z+1:NJ) = Uref
        V_c(0,0:NJ) = 0.0
        P_c(0,0:NJ) = P_c(1,0:NJ)	

	!wall
        U_c(0:NI,0) = -U_c(0:NI,1)
        V_c(0:NI,0) = -V_c(0:NI,1)
        P_c(0:NI,0) = P_c(0:NI,1)

	!outlet up
        V_c(0:NI,NJ) = V_c(0:NI,NJ-1)
        U_c(0:NI,NJ) = Uref
        P_c(0:NI,NJ) = P_c(0:NI,NJ-1)


	!outlet
        U_c(NI,0:NJ) = U_c(NI-1,0:NJ)
        V_c(NI,0:NJ) = V_c(NI-1,0:NJ)
        P_c(NI,0:NJ) = 0.0

!---------------- Solve Navier-Stokes equations ---------------------
 
        write(*,*) 'Solve Navier-Stokes equations' 
        Open(IO,FILE='Res.plt')
        Write(IO,*) 'VARIABLES = "Iter","ResU", "ResV", "ResP"'
        Write(IO,*) 'ZONE I=',1,', J=',NITER
        Call NavierStokes(NI, NJ, Z, Uref, NITER, NU, dx, P_c, U_c, V_c, U0, dt, EPS, dy, IO)     
        Close(IO)     
                       
 !----------------- Output data ------------------------------
 
        write(*,*) 'Output data cell (Navier-Stokes)' 
        Open(IO,FILE='data.plt')
        Call OutputFields_Cell(IO, NI, NJ, X_Node, Y_Node, U_c, V_c, P_c)
        Close(IO)  
	!
        !Open(IO,FILE='Cf.plt')
        !write(IO,*) 'variables = "Re_x", "C_f_bl", "C_f"'
        !write(IO,*) 'zone i =', NI-1
        !DO I = 1, NI-1
        !        Re_x = U0*dx*I/NU
        !        C_f_bl = 0.644/sqrt(Re_x)
        !        C_f = (NU*(U_c(I,1)-U_c(I,0)))/(dy*(MAXVAL(U_c(I,1:NJ-1)))**2)*2
        !        write(IO,*) Re_x, C_f_bl, C_f
        !ENDDO
        !Close(IO) 
	!
        !Open(IO,FILE='Cf.data')
        !write(IO,*) 'variables = "Re_x", "C_f"'
        !write(IO,*) 'zone i =', NI-1
        !DO I = 1, NI-1
        !        Re_x = U0*dx*I/NU
        !        C_f_bl = 0.644/sqrt(Re_x)
        !        C_f = (NU*(U_c(I,1)-U_c(I,0)))/(dy*(MAXVAL(U_c(I,1:NJ-1)))**2)*2
        !        write(IO,*) Re_x, C_f_bl, C_f
        !ENDDO
        !Close(IO) 


	!velocity in self-similar coordinates

 	Open(IO,FILE='x=0.2.dat')
 	i=0.2/dx
 	write(IO, *) 'VARIABLES = "U", "Y"' 
 	write(IO, *) "ZONE i=", NJ
 	print*, i

 	U_max = maxval(U_c(i,0:NJ))
 	do j = 0, NJ 
  		if (abs(U_c(i,j)-U_max)<0.05) then 
     			delta = Y_node(i,j)
 			exit
  		endif
 	end do 

  	do j=1,NJ
  		write(IO,*) U_c(i,j)/U_max, 5*Y_Node(i,j)/delta
  	end do
  	Close(IO)

 	Open(IO,FILE='x=0.4.dat')
  	i=0.4/dx
  	write(IO, *) 'VARIABLES = "U", "Y"' 
  	write(IO, *) "ZONE i=", NJ
  	print*, i
  	U_max = maxval(U_c(i,0:NJ))
  	do j = 0, NJ 
  		if (abs(U_c(i,j)-U_max)<0.05) then 
      			delta = Y_node(i,j)
      			exit
    		endif
  	end do 

	do j=0,NJ
 		write(IO,*) U_c(i,j)/U_max, 5*Y_Node(i,j)/delta
  	end do
  	Close(IO)

  	Open(IO,FILE='x=0.6.dat')
  	i=0.6/dx
  	write(IO, *) 'VARIABLES = "U", "Y"' 
  	write(IO, *) "ZONE i=", NJ
  	print*, i

  	U_max = maxval(U_c(i,0:NJ))
  	do j = 0, NJ 
  		if (abs(U_c(i,j)-U_max)<0.05) then 
      			delta = Y_node(i,j)
      			exit
    		endif
  	end do 

  	do j=0,NJ
    		write(IO,*) U_c(i,j)/U_max, 5*Y_Node(i,j)/delta
  	end do
  	Close(IO)

 	Open(IO,FILE='x=0.8.dat')
  	i=0.8/dx
  	write(IO, *) 'VARIABLES = "U", "Y"' 
  	write(IO, *) "ZONE i=", NJ
  	print*, i
  	U_max = maxval(U_c(i,:))
  	do j = 0, NJ 
  		if (abs(U_c(i,j)-U_max)<0.05) then 
      			delta = Y_node(i,j)
      			exit
    		endif
  	end do 

	do j=0,NJ
 		write(IO,*) U_c(i,j)/U_max, 5*Y_Node(i,j)/delta
  	end do
  	Close(IO)

  	Open(IO,FILE='x=0.9.dat')
  	i=0.9/dx
  	write(IO, *) 'VARIABLES = "U", "Y"' 
  	write(IO, *) "ZONE i=", NJ
  	print*, i

  	U_max = maxval(U_c(i,:))
  	do j = 0, NJ 
  		if (abs(U_c(i,j)-U_max)<0.05) then 
      			delta = Y_node(i,j)
      			exit
    		endif
  	end do 

  	do j=0,NJ
    		write(IO,*) U_c(i,j)/U_max, 5*Y_Node(i,j)/delta
  	end do
  	Close(IO)
     
        END PROGRAM

!************************************************************************************************      
	SUBROUTINE NavierStokes(NI, NJ, Z, Uref, NITER, NU, dx, P_c, U_c, V_c, U0, dt, EPS, dy, IO)
        INTEGER I, J, NI, NJ, NITER, t, IO, Z
        REAL NU, dx, U0, A, dt, EPS, dy, Uref
        REAL MAX_P, MAX_U, MAX_V, U_hat, V_hat, Imx, Imy, Mass
	REAL,DIMENSION(0:NI,0:NJ)::P_c, U_c, V_c
        DOUBLE PRECISION,DIMENSION(0:NI,0:NJ):: Res_U, Res_V, Res_P, U_new, V_new, P_new

        A = 1/(U0**2)
        t = 0
        MAX_P = 1 
        MAX_U = 1 
        MAX_V = 1

        DO WHILE (((MAX_U.GE.EPS).AND.(MAX_V.GE.EPS).AND.(MAX_P.GE.EPS)).AND.(t.LE.NITER))
                Res_U(0:NI,0:NJ) = 0.0
                Res_V(0:NI,0:NJ) = 0.0
                Res_P(0:NI,0:NJ) = 0.0
                DO J = 1, NJ-1
                        DO I = 0, NI-1
                                Imx = 0.0
                                Imy = 0.0
                                Mass = 0.0
                                U_hat = 0.5 * (U_c(I+1,J)+U_c(I,J))
                                IF (U_hat.GE.0) THEN
                                        Imx = -(U_hat*U_c(I,J)/dx) - P_c(I+1,J)/dx + NU*(U_c(I+1,J)-U_c(I,J))/(dx**2)
                                        Imy = -(U_hat*V_c(I,J)/dx) + NU*(V_c(I+1,J)-V_c(I,J))/(dx**2)
                                        Mass = -(1/A) * U_c(I,J)/dx
                                ELSE
                                        Imx = -(U_hat*U_c(I+1,J)/dx) - P_c(I,J)/dx + NU*(U_c(I+1,J)-U_c(I,J))/(dx**2)
                                        Imy = -(U_hat*V_c(I+1,J)/dx) + NU*(V_c(I+1,J)-V_c(I,J))/(dx**2)
                                        Mass = -(1/A) * U_c(I+1,J)/dx
                                ENDIF
                                Res_U(I,J) = Res_U(I,J) + Imx
                                Res_U(I+1,J) = Res_U(I+1,J) - Imx
                                Res_V(I,J) = Res_V(I,J) + Imy
                                Res_V(I+1,J) = Res_V(I+1,J) - Imy
                                Res_P(I,J) = Res_P(I,J) + Mass
                                Res_P(I+1,J) = Res_P(I+1,J) - Mass
                        ENDDO
                        Res_U(0,J) = 0.0
                        Res_U(NI,J) = 0.0
                        Res_V(0,J) = 0.0
                        Res_V(NI,J) = 0.0
                        Res_P(0,J) = 0.0
                        Res_P(NI,J) = 0.0
                ENDDO

                DO I = 1, NI-1
                        DO J = 0, NJ-1
                                Imx = 0.0
                                Imy = 0.0
                                Mass = 0.0
                                V_hat = 0.5 * (V_c(I,J+1)+V_c(I,J))
                                IF (V_hat.GE.0) THEN
                                        Imx = -(V_hat*U_c(I,J)/dy) + NU*(U_c(I,J+1)-U_c(I,J))/(dy**2)
                                        Imy = -(V_hat*V_c(I,J)/dy) - P_c(I,J+1)/dy + NU*(V_c(I,J+1)-V_c(I,J))/(dy**2)
                                        IF (J.EQ.0) THEN
                                                Mass = 0.0
                                        ELSE
                                                Mass = -(1/A) * V_c(I,J)/dy
                                        ENDIF
                                ELSE
                                        Imx = -(V_hat*U_c(I,J+1)/dy) + NU*(U_c(I,J+1)-U_c(I,J))/(dy**2)
                                        Imy = -(V_hat*V_c(I,J+1)/dy) - P_c(I,J)/dy + NU*(V_c(I,J+1)-V_c(I,J))/(dy**2)
                                        IF (J.EQ.0) THEN
                                                Mass = 0.0
                                        ELSE
                                                Mass = -(1/A) * V_c(I,J+1)/dy
                                        ENDIF
                                ENDIF
                                Res_U(I,J) = Res_U(I,J) + Imx
                                Res_U(I,J+1) = Res_U(I,J+1) - Imx
                                Res_V(I,J) = Res_V(I,J) + Imy
                                Res_V(I,J+1) = Res_V(I,J+1) - Imy
                                Res_P(I,J) = Res_P(I,J) + Mass
                                Res_P(I,J+1) = Res_P(I,J+1) - Mass     
                        ENDDO
                        Res_U(I,0) = 0.0
                        Res_U(I,NJ) = 0.0
                        Res_V(I,0) = 0.0
                        Res_V(I,NJ) = 0.0
                        Res_P(I,0) = 0.0
                        Res_P(I,NJ) = 0.0
                ENDDO
                DO I = 1, NI-1
                        DO J = 1, NJ-1
                                U_new(I,J) = U_c(I,J) + Res_U(I,J)*dt
                                V_new(I,J) = V_c(I,J) + Res_V(I,J)*dt
                                P_new(I,J) = P_c(I,J) + Res_P(I,J)*dt
                        ENDDO
                ENDDO

                U_new(0:NI,0) = -U_new(0:NI,1)
                V_new(0:NI,0) = -V_new(0:NI,1)
                P_new(0:NI,0) = P_new(0:NI,1)

                U_new(0,0:Z) = U0
		U_new(0,Z+1:NJ) = Uref
                V_new(0,0:NJ) = 0.0
                P_new(0,0:NJ) = P_new(1,0:NJ)

                V_new(0:NI,NJ) = V_new(0:NI,NJ-1)
                P_new(0:NI,NJ) = P_new(0:NI,NJ-1)
		U_new(0:NI,NJ) = Uref

                U_new(NI,0:NJ) = U_new(NI-1,0:NJ)
                V_new(NI,0:NJ) = V_new(NI-1,0:NJ)
                P_new(NI,0:NJ) = 0.0

                MAX_U = MAXVAL(ABS(Res_U(0:NI,0:NJ)))
                MAX_V = MAXVAL(ABS(Res_V(0:NI,0:NJ)))
                MAX_P = MAXVAL(ABS(Res_P(0:NI,0:NJ)))
                t = t+1
                Write(IO,*) t,MAX_U,MAX_V,MAX_P
                U_c(0:NI,0:NJ) = U_new(0:NI,0:NJ)
                V_c(0:NI,0:NJ) = V_new(0:NI,0:NJ)
                P_c(0:NI,0:NJ) = P_new(0:NI,0:NJ)
        ENDDO
	END  SUBROUTINE NavierStokes

!************************************************************************************************
        SUBROUTINE OutputFields_Cell(IO,NI,NJ,X,Y,U,V,P)
        IMPLICIT NONE

        INTEGER NI,NJ,IO
        REAL,DIMENSION(NI,NJ):: X,Y
        REAL,DIMENSION(0:NI,0:NJ)::U,V,P
       
        Write(IO,*) 'VARIABLES = "X", "Y", "U", "V", "P"' 
        Write(IO,*) 'ZONE I=',NI,', J=',NJ,', DATAPACKING=BLOCK, VARLOCATION=([3-20]=CELLCENTERED)'
        Write(IO,'(100E25.16)') X(1:NI,1:NJ) 
        Write(IO,'(100E25.16)') Y(1:NI,1:NJ)
        Write(IO,'(100E25.16)') U(1:NI-1,1:NJ-1)
        Write(IO,'(100E25.16)') V(1:NI-1,1:NJ-1)
        Write(IO,'(100E25.16)') P(1:NI-1,1:NJ-1)

        END SUBROUTINE 
